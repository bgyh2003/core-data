{"version":3,"file":"index.cjs.js","sources":["../src/data-storage.ts","../src/data-event.ts","../src/core-data.ts"],"sourcesContent":["import { IData } from \"./types\"\r\nimport { DataEvent } from \"./data-event\"\r\n\r\nexport class DataStorage<T extends IData> {\r\n\r\n    constructor(\r\n        public data: T,\r\n    ) { }\r\n\r\n    get<K extends keyof T>(key: K): T[K] {\r\n        return this.data[key]\r\n    }\r\n\r\n    set<K extends keyof T>(key: K, value: T[K]) {\r\n        this.data[key] = value\r\n    }\r\n\r\n    update(newData: Partial<T>): (keyof T)[] {\r\n        Object.assign(this.data, newData)\r\n        return Object.keys(newData)\r\n    }\r\n\r\n    export(): T {\r\n        return JSON.parse(JSON.stringify(this.data))\r\n    }\r\n\r\n}","import type { IData, ICallback, IListener } from \"./types\"\r\n\r\nexport class DataEvent<T extends IData> {\r\n\r\n    listeners: IListener<T>[] = []\r\n    constructor() { }\r\n\r\n    addListener(\r\n        callback: ICallback<T>,\r\n        keys: (keyof T)[] = [],\r\n        channels: string[] = []\r\n    ) {\r\n        this.listeners.push({ callback, keys, channels })\r\n    }\r\n\r\n    removeListener(callback: ICallback<T>) {\r\n        this.listeners = this.listeners.filter(listener => listener.callback !== callback)\r\n    }\r\n\r\n    clearListeners() {\r\n        this.listeners = []\r\n    }\r\n\r\n    trigger(\r\n        data: T,\r\n        updatedKeys: (keyof T)[],\r\n        channelNames: string[] = []\r\n    ) {\r\n\r\n        // 遍历全部监听器\r\n        this.listeners.forEach(({ keys, callback, channels }) => {\r\n\r\n            // 检测频道\r\n            if (\r\n\r\n                // 全频道推送\r\n                channelNames.length === 0 ||\r\n\r\n                // 全频道监听\r\n                channels.length === 0 ||\r\n\r\n                // 监听器监听的频道与更新的频道有交集\r\n                channelNames.some(ch => channels.includes(ch))\r\n            ) {\r\n\r\n                // 检测键\r\n                if (\r\n\r\n                    // 监听器监听所有键\r\n                    keys.length === 0 ||\r\n\r\n                    // 监听器监听的键与更新的键有交集\r\n                    updatedKeys.some(key => keys.includes(key))\r\n\r\n                ) callback(data, updatedKeys, channelNames)\r\n\r\n            }\r\n\r\n\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n}","import { IData, IListener, ICallback } from \"./types\"\r\nimport { DataStorage } from \"./data-storage\"\r\nimport { DataEvent } from \"./data-event\"\r\n\r\nexport class CoreData<T extends IData> {\r\n\r\n    dataStorage: DataStorage<T>\r\n\r\n    dataEvent: DataEvent<T>\r\n\r\n    constructor(data: T) {\r\n        this.dataStorage = new DataStorage(data)\r\n        this.dataEvent = new DataEvent()\r\n    }\r\n\r\n    get<K extends keyof T>(key: K): T[K] {\r\n        return this.dataStorage.get(key)\r\n    }\r\n\r\n    set<K extends keyof T>(key: K, value: T[K], channelNames: string[] = []) {\r\n        this.dataStorage.set(key, value)\r\n        this.dataEvent.trigger(this.dataStorage.data, [key], channelNames)\r\n    }\r\n\r\n    export(): T {\r\n        return this.dataStorage.export()\r\n    }\r\n\r\n\r\n    update(newData: Partial<T>, channelNames: string[] = []) {\r\n        const updatedKeys = this.dataStorage.update(newData)\r\n        this.dataEvent.trigger(this.dataStorage.data, updatedKeys, channelNames)\r\n    }\r\n\r\n\r\n    addListener(\r\n        callback: ICallback<T>,\r\n        keys: (keyof T)[] = [],\r\n        channels: string[] = []\r\n    ) {\r\n        this.dataEvent.addListener(callback, keys, channels)\r\n    }\r\n\r\n    removeListener(callback: ICallback<T>) {\r\n        this.dataEvent.removeListener(callback)\r\n    }\r\n\r\n    clearListeners() {\r\n        this.dataEvent.clearListeners()\r\n    }\r\n}"],"names":["DataStorage","constructor","data","this","get","key","set","value","update","newData","Object","assign","keys","JSON","parse","stringify","DataEvent","listeners","addListener","callback","channels","push","removeListener","filter","listener","clearListeners","trigger","updatedKeys","channelNames","forEach","length","some","ch","includes","dataStorage","dataEvent","export"],"mappings":"mBAGaA,EAET,WAAAC,CACWC,GAAAC,KAAAD,KAAAA,CACP,CAEJ,GAAAE,CAAuBC,GACnB,OAAOF,KAAKD,KAAKG,EACrB,CAEA,GAAAC,CAAuBD,EAAQE,GAC3BJ,KAAKD,KAAKG,GAAOE,CACrB,CAEA,MAAAC,CAAOC,GAEH,OADAC,OAAOC,OAAOR,KAAKD,KAAMO,GAClBC,OAAOE,KAAKH,EACvB,CAEA,SACI,OAAOI,KAAKC,MAAMD,KAAKE,UAAUZ,KAAKD,MAC1C,QCtBSc,EAGT,WAAAf,GADAE,KAAAc,UAA4B,EACZ,CAEhB,WAAAC,CACIC,EACAP,EAAoB,GACpBQ,EAAqB,IAErBjB,KAAKc,UAAUI,KAAK,CAAEF,WAAUP,OAAMQ,YAC1C,CAEA,cAAAE,CAAeH,GACXhB,KAAKc,UAAYd,KAAKc,UAAUM,OAAOC,GAAYA,EAASL,WAAaA,EAC7E,CAEA,cAAAM,GACItB,KAAKc,UAAY,EACrB,CAEA,OAAAS,CACIxB,EACAyB,EACAC,EAAyB,IAIzBzB,KAAKc,UAAUY,QAAQ,EAAGjB,OAAMO,WAAUC,gBAMV,IAAxBQ,EAAaE,QAGO,IAApBV,EAASU,QAGTF,EAAaG,KAAKC,GAAMZ,EAASa,SAASD,OAOtB,IAAhBpB,EAAKkB,QAGLH,EAAYI,KAAK1B,GAAOO,EAAKqB,SAAS5B,MAExCc,EAASjB,EAAMyB,EAAaC,IAQ1C,yBCpDA,WAAA3B,CAAYC,GACRC,KAAK+B,YAAc,IAAIlC,EAAYE,GACnCC,KAAKgC,UAAY,IAAInB,CACzB,CAEA,GAAAZ,CAAuBC,GACnB,OAAOF,KAAK+B,YAAY9B,IAAIC,EAChC,CAEA,GAAAC,CAAuBD,EAAQE,EAAaqB,EAAyB,IACjEzB,KAAK+B,YAAY5B,IAAID,EAAKE,GAC1BJ,KAAKgC,UAAUT,QAAQvB,KAAK+B,YAAYhC,KAAM,CAACG,GAAMuB,EACzD,CAEA,SACI,OAAOzB,KAAK+B,YAAYE,QAC5B,CAGA,MAAA5B,CAAOC,EAAqBmB,EAAyB,IACjD,MAAMD,EAAcxB,KAAK+B,YAAY1B,OAAOC,GAC5CN,KAAKgC,UAAUT,QAAQvB,KAAK+B,YAAYhC,KAAMyB,EAAaC,EAC/D,CAGA,WAAAV,CACIC,EACAP,EAAoB,GACpBQ,EAAqB,IAErBjB,KAAKgC,UAAUjB,YAAYC,EAAUP,EAAMQ,EAC/C,CAEA,cAAAE,CAAeH,GACXhB,KAAKgC,UAAUb,eAAeH,EAClC,CAEA,cAAAM,GACItB,KAAKgC,UAAUV,gBACnB"}